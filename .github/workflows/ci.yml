name: PyGoat

on: [push, pull_request]
jobs:
  lint:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: lint terraform files
        uses: terraform-linters/setup-tflint@v4
        with:
          tflint_version: v0.47.0
      - name: check terraform file 
        run: |
          tflint --format=json --chdir=EKS-Terraform > tflint-report.json || true

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.5.7

      - name: terraform fmt
        run: |
           terraform fmt -check -diff -recursive EKS-Terraform > fmt-report.txt
           if [ ! -s fmt-report.txt ]; then
           echo "Aucun problème de format détecté dans les fichiers Terraform." > fmt-report.txt
           fi


      - name: terraform validate
        run: |
          terraform init EKS-Terraform --backend=false > init-report.txt || true
          terraform validate > validate-report.txt || true

      - name: install checkov
        run: pip install checkov

      - name: run checkov on terraform
        run: checkov -d EKS-Terraform -o json > checkov-report.json || true


      - name: install kube-linter
        run: |
            curl -sSL -o kube-linter.tar.gz https://github.com/stackrox/kube-linter/releases/download/v0.6.6/kube-linter-linux.tar.gz
            tar -xzf kube-linter.tar.gz
            chmod +x kube-linter
            sudo mv kube-linter /usr/local/bin/kube-linter

      - name: Check kube-linter version
        run: kube-linter version

      - name: lint kubernetes manifests
        run: kube-linter lint ./manifests > kube-lint-report.txt || true

      - name: Debug:list reports
        run: ls -lh *.txt *.json || true


      - name: Upload lint artifact
        uses: actions/upload-artifact@v4
        with:
          name: lint-report
          path: |
            tflint-report.json
            fmt-report.txt
            validate-report.txt
            kube-lint-report.txt 
            checkov-report.json 

SAST:
  runs-on: ubuntu-latest
  needs: lint

  steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: SonarQube Scan
      uses: SonarSource/sonarqube-scan-action@v4 
      env:
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        SONAR_HOST_URL: ${{ vars.SONAR_HOST_URL }}


  test:
    runs-on: ubuntu-latest
    needs: SAST

    steps:
      - uses: actions/checkout@v4

      - name: installer docker et docker compose
        run: | 
          chmod +x scripts/docker_install.sh
          ./scripts/docker_install.sh

      - name: Test my app
        run: | 
          docker build -t pygoat-test .
          docker run pygoat-test pytest
          docker ps -a 
          docker rm $(docker ps -a -q)


  
  build:
    runs-on: ubuntu-latest
    needs: test

    steps:
      - uses: actions/checkout@v4

      - name: installer docker et docker compose
        run: | 
          chmod +x scripts/docker_install.sh
          ./scripts/docker_install.sh

      - name: Build my app
        run: | 
          docker build -t pygoat-prod .
      
      - name: login to docker hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: push to docker hub
        run: | 
          docker push pygoat-prod:latest 


  

