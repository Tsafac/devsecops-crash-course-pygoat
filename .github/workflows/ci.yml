name: PyGoat

on: 
  push:
    branches:
      - staging
      - main
  
    paths-ignore:
      - 'README.md'
jobs:
  lint:
    if: github.ref == 'refs/heads/staging'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: lint terraform files
        uses: terraform-linters/setup-tflint@v4
        with:
          tflint_version: v0.47.0
      - name: check terraform file 
        run: |
          tflint --format=json --chdir=EKS-Terraform > tflint-report.json || true

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.5.7

      - name: terraform fmt
        run: |
           terraform fmt -check -diff -recursive EKS-Terraform > fmt-report1.txt
           if [ ! -s fmt-report1.txt ]; then
           echo "Aucun problème de format détecté dans les fichiers Terraform." > fmt-report.txt
           fi


      - name: terraform validate
        run: |
          terraform init EKS-Terraform --backend=false > init-report.txt || true
          terraform validate > validate-report.txt || true

      - name: install checkov
        run: pip install checkov

      - name: run checkov on terraform
        run: checkov -d EKS-Terraform -o json > checkov-report.json || true


      - name: install kube-linter
        run: |
            curl -sSL -o kube-linter.tar.gz https://github.com/stackrox/kube-linter/releases/download/v0.6.6/kube-linter-linux.tar.gz
            tar -xzf kube-linter.tar.gz
            chmod +x kube-linter
            sudo mv kube-linter /usr/local/bin/kube-linter

      - name: Check kube-linter version
        run: kube-linter version

      - name: lint kubernetes manifests
        run: kube-linter lint ./manifests > kube-lint-report.txt || true

      - name: Debug:list reports
        run: ls -lh *.txt *.json || true


      - name: Upload lint artifact
        uses: actions/upload-artifact@v4
        with:
          name: lint-report
          path: |
            tflint-report.json
            fmt-report1.txt
            validate-report.txt
            kube-lint-report.txt 
            checkov-report.json 

  sast:
    if: github.ref == 'refs/heads/staging'
    runs-on: ubuntu-latest
    needs: lint

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: SonarQube Scan
        uses: SonarSource/sonarqube-scan-action@v4 
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ vars.SONAR_HOST_URL }}
        with:
          args: >-
            -Dsonar.projectKey=${{ vars.SONAR_PROJECT_KEY }}
            -Dsonar.projectName=${{ vars.SONAR_PROJECT_NAME }}
            -Dsonar.projectVersion=${{ github.sha }}
          
  tests:
     if: github.ref == 'refs/heads/staging'
     runs-on: ubuntu-latest 
     needs: sast

     steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Install Dependancies
        run: |
          sudo apt-get update
          sudo apt-get install -y libjpeg-dev zlib1g-dev build-essential python3-dev

      - name: Install Dependencies
        run: |
          pip install -r requirements.txt

      - name: Test my app
        run: |
         pytest
         python manage.py test


  sca_dependancies:
    if: github.ref == 'refs/heads/staging'
    runs-on: ubuntu-latest
    needs: tests

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Download HTML template
        run: |
          curl -o html.tpl https://raw.githubusercontent.com/aquasecurity/trivy/main/contrib/html.tpl


      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/Trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: .
          severity: 'HIGH,CRITICAL'
          ignore-unfixed: true
          format: template
          template: "@html.tpl"
          output: 'trivy-fs-report.html'
          exit-code: 0
      - name: Upload Trivy vulnerability report
        uses: actions/upload-artifact@v4
        with:
          name: trivy-fs-report
          path: trivy-fs-report.html

  
  build_and_sca_image:
    if: github.ref == 'refs/heads/staging'
    runs-on: ubuntu-latest
    outputs:
    needs: sca_dependancies

    steps:
      - uses: actions/checkout@v4

      - name: Install Docker 
        run: | 
          chmod +x scripts/docker_install.sh
          ./scripts/docker_install.sh

      - name: Download HTML template
        run: |
          curl -o html.tpl https://raw.githubusercontent.com/aquasecurity/trivy/main/contrib/html.tpl


      - name: Build Docker Image
        run: | 
          docker build -t pygoat:staging-${{github.sha}} .
          docker run -d --rm --name pygoat -p 8000:8000 pygoat:staging-${{github.sha}}
          sleep 10
          docker logs pygoat
          docker stop pygoat

      - name: Scan Docker Image
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: pygoat:staging-${{github.sha}}
          severity: HIGH,CRITICAL
          format: template
          template: "@html.tpl"
          ignore-unfixed: true
          output: 'trivy-image-report.html'
          exit-code: 0
      - name: Upload Trivy image report
        uses: actions/upload-artifact@v4
        with:
          name: trivy-image-report
          path: trivy-image-report.html

      - name: Install Syft 
        run: |
          curl -sSfL https://raw.githubusercontent.com/anchore/syft/main/install.sh | sh -s -- -b /usr/local/bin

      - name: Scan Docker Image with Syft
        run: |
          syft pygoat:staging-${{github.sha}} -o cyclonedx-json > sbom.json

      - name: Upload SBOM report
        uses: actions/upload-artifact@v4
        with:
          name: sbom
          path: sbom.json

      
      - name: login to docker hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: push to docker hub
        if: success()
        run: | 
          docker tag pygoat:staging-${{ github.sha }} ${{ secrets.DOCKER_USERNAME }}/pygoat:staging-${{ github.sha }}
          docker push ${{ secrets.DOCKER_USERNAME }}/pygoat:staging-${{ github.sha }}

      - name: Get Docker Image Digest
        id: image_digest
        env:
          DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
        run: |
          IMAGE="docker.io/${DOCKER_USERNAME}/pygoat:staging-${GITHUB_SHA}"
          docker pull "$IMAGE"
          DIGEST=$(docker inspect --format='{{index .RepoDigests 0}}' "$IMAGE")
          echo "Resolved digest: $DIGEST"
          echo "digest=$DIGEST" >> "$GITHUB_OUTPUT"

      
      - name: Install Cosign
        run: |
          COSIGN_VERSION="v2.2.3"
          curl -sSL -Lo cosign "https://github.com/sigstore/cosign/releases/download/${COSIGN_VERSION}/cosign-linux-amd64"
          chmod +x cosign
          sudo mv cosign /usr/local/bin/cosign

      - name: Check cosign version
        run: cosign version

      - name: Sign Docker Image and Sbom.json
        env:
          COSIGN_PRIVATE_KEY: ${{ secrets.COSIGN_PRIVATE_KEY }}
          COSIGN_PASSWORD: ${{ secrets.COSIGN_PASSWORD }}
        run: |
          cosign sign --yes --key env://COSIGN_PRIVATE_KEY "${{ steps.image_digest.outputs.digest }}" > cosign-verif-image.txt
          cosign sign-blob --yes --key env://COSIGN_PRIVATE_KEY \
            --output-signature sbom.sig \
            --output-certificate sbom.cert \
            sbom.json


      - name: Upload Cosign Image Verification Report
        uses: actions/upload-artifact@v4
        with:
          name: cosign-verif-image
          path: |
             sbom.sig
             sbom.cert
             cosign-verif-image.txt

  deploy_staging:
     if: github.ref == 'refs/heads/staging'
     runs-on: ubuntu-latest
     needs: build_and_sca_image

     steps:
       - uses: actions/checkout@v4

       - name: Download Cosign Artifacts
         uses: actions/download-artifact@v4
         with:
           name: cosign-verif-image
           path: ./artifacts

       - name: Download SBOM
         uses: actions/download-artifact@v4
         with:
           name: sbom
           path: ./artifacts

       - name: Move Artifacts
         run: |
           find ./artifacts -name "sbom.*" -exec cp {} . \; 

       - name: List downloaded artifacts
         run: ls -R ./artifacts


       - name: Upload manifests via SCP
         uses: appleboy/scp-action@master
         with:
           host: ${{ secrets.HOST }}
           username: ${{ secrets.USERNAME_HOST }}
           key: ${{ secrets.SSH_KEY }}
           port: ${{ secrets.PORT }}
           source: "manifests/app-deploy.yaml,manifests/app-svc.yaml"
           target: "/home/ubuntu/manifests"

       - name: Install Cosign
         run: |
           COSIGN_VERSION="v2.2.3"
           curl -sSL -Lo cosign "https://github.com/sigstore/cosign/releases/download/${COSIGN_VERSION}/cosign-linux-amd64"
           chmod +x cosign
           sudo mv cosign /usr/local/bin/cosign

       - name: Check cosign version
         run: cosign version

       - name: Pull and Inspect Docker Image
         id: verify_digest
         env:
           DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
         run: |
           IMAGE="docker.io/${DOCKER_USERNAME}/pygoat:staging-${GITHUB_SHA}"
           echo "Pulling image: $IMAGE"
           docker pull "$IMAGE"

           DIGEST=$(docker inspect --format='{{index .RepoDigests 0}}' "$IMAGE")
           echo "Resolved digest: $DIGEST"
           echo "digest=$DIGEST" >> "$GITHUB_OUTPUT"


       - name: Verify Docker Image Signature
         env:
           COSIGN_PUB_KEY: ${{ secrets.COSIGN_PUB_KEY }}
         run: |
           cosign verify --key env://COSIGN_PUB_KEY "${{ steps.verify_digest.outputs.digest }}" > cosign-image-verif.txt


       - name: Upload Cosign Image Verification Report
         uses: actions/upload-artifact@v4
         with:
           name: cosign-image-verif
           path: cosign-image-verif.txt

       - name: Verify Signed SBOM

         env:
           COSIGN_PUB_KEY: ${{ secrets.COSIGN_PUB_KEY }}
         run: |
           cosign verify-blob \
             --key env://COSIGN_PUB_KEY \
             --signature sbom.sig \
             --certificate sbom.cert \
             sbom.json > cosign-sbom-verif.txt

       - name: Upload Cosign SBOM Verification Report
         uses: actions/upload-artifact@v4
         with:
           name: cosign-sbom-verif
           path: |
             sbom.sig
             sbom.cert
             cosign-sbom-verif.txt


    
       - name: Apply manifests via SSH
         uses: appleboy/ssh-action@master
         with:
           host: ${{ secrets.HOST }}
           username: ${{ secrets.USERNAME_HOST }}
           key: ${{ secrets.SSH_KEY }}
           port: ${{ secrets.PORT }}
           script: |
             kubectl delete deployment pygoat-deployment -n staging || true
             kubectl delete service pygoat-service -n staging || true
             kubectl get pods -n staging -l app=pygoat -o name | xargs -I {} kubectl delete {} -n staging --grace-period=0 --force || true
             cd /home/ubuntu/manifests/manifests
             kubectl create ns staging || true
             sed -i "s|\${{ github.sha }}|${{ github.sha }}|g" app-deploy.yaml
             kubectl apply -f app-deploy.yaml -n staging
             kubectl apply -f app-svc.yaml -n staging
             sleep 10
             kubectl get pods -n staging -o wide 
             kubectl get svc -n staging

  dast:
        if: github.ref == 'refs/heads/staging'
        needs: deploy_staging
        runs-on: ubuntu-latest
        
        steps:
          - name: checkout code
            uses: actions/checkout@v4
            with:
              fetch-depth: 0

          - name: Run Zap Scan
            uses: appleboy/ssh-action@master
            with:
              host: ${{ secrets.HOST }}
              username: ${{ secrets.USERNAME_HOST }}
              key: ${{ secrets.SSH_KEY }}
              port: ${{ secrets.PORT }}
              script: |
                mkdir -p /home/ubuntu/zap
                cd /home/ubuntu/zap 
                docker network create zapnet || true
                docker run --rm --network zapnet -v $(pwd):/zap/wrk ghcr.io/zaproxy/zaproxy:weekly /zap/zap-baseline.py -t ${{ secrets.TARGET_URL }} -r zap-report.html || true
                docker network rm zapnet || true
                while [ ! -f /home/ubuntu/zap/zap-report.html ]; do sleep 1; done
                tar -czf /home/ubuntu/zap/zap-report.tar.gz zap-report.html
                ls -la /home/ubuntu/zap/ 


          - name: Create the SSH key file (key.pem)
            run: |
              echo "${{ secrets.SSH_KEY }}" > key.pem
              chmod 600 key.pem



          - name: Download ZAP report archive via SCP
            run: |
             scp -o StrictHostKeyChecking=no -i key.pem -P ${{ secrets.PORT }} \
               ${{ secrets.USERNAME_HOST }}@${{ secrets.HOST }}:/home/ubuntu/zap/zap-report.tar.gz .

          - name: Verify the downloaded file
            run: |
              ls -la
              file zap-report.tar.gz
              tar -tzf zap-report.tar.gz

          - name: Extract the ZAP report
            run: tar -xzf zap-report.tar.gz

          - name: Upload Zap artifact
            uses: actions/upload-artifact@v4
            with:
              name: Zap-report
              path: zap-report.html

          - name: Delete the temporary key
            run: rm -f key.pem

  promote:
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    needs: []

    steps:
      - name: Pull Docker Image
        run: |
          set -e
          docker login -u ${{ secrets.DOCKER_USERNAME }} -p ${{ secrets.DOCKER_PASSWORD }}
          docker pull ${{ secrets.DOCKER_USERNAME }}/pygoat:staging-latest
          docker tag ${{ secrets.DOCKER_USERNAME }}/pygoat:staging-latest ${{ secrets.DOCKER_USERNAME }}/pygoat:prod-${{ github.sha }}
          docker images
          docker push ${{ secrets.DOCKER_USERNAME }}/pygoat:prod-${{github.sha}}
        

  deploy_prod:
     if: github.ref == 'refs/heads/main'
     runs-on: ubuntu-latest
     needs: promote

     steps:
       - uses: actions/checkout@v4

    
       - name: Upload manifests via SCP
         uses: appleboy/scp-action@master
         with:
           host: ${{ secrets.HOST }}
           username: ${{ secrets.USERNAME_HOST }}
           key: ${{ secrets.SSH_KEY }}
           port: ${{ secrets.PORT }}
           source: "manifests/app-deploy.yaml,manifests/app-svc.yaml"
           target: "/home/ubuntu/manifests"

    
       - name: Apply manifests via SSH
         uses: appleboy/ssh-action@master
         with:
           host: ${{ secrets.HOST }}
           username: ${{ secrets.USERNAME_HOST }}
           key: ${{ secrets.SSH_KEY }}
           port: ${{ secrets.PORT }}
           script: |
             kubectl delete deployment pygoat-deployment -n prod || true
             kubectl delete service pygoat-service -n prod || true
             kubectl get pods -n staging -l app=pygoat -o name | xargs -I {} kubectl delete {} -n staging --grace-period=0 --force || true
             cd /home/ubuntu/manifests/manifests
             kubectl create ns prod || true
             sed -i "s|\${{ github.sha }}|${{ github.sha }}|g" app-deploy.yaml
             kubectl apply -f app-deploy.yaml -n prod
             kubectl apply -f app-svc.yaml -n prod
             sleep 10
             kubectl get pods -n prod -o wide
             kubectl get svc -n prod

                  
          

                 
              



  

